package org.biopax.validator.rules;

/*
 * #%L
 * BioPAX Validator
 * %%
 * Copyright (C) 2008 - 2013 University of Toronto (baderlab.org) and Memorial Sloan-Kettering Cancer Center (cbio.mskcc.org)
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation, either version 3 of the 
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public 
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */


import org.biopax.paxtools.model.level3.RelationshipXref;
import org.biopax.paxtools.model.level3.UnificationXref;
import org.biopax.validator.api.AbstractRule;
import org.biopax.validator.api.beans.Validation;
import org.springframework.stereotype.Component;

/**
 * Checks whether more than one objects have the same 
 * UnificationXref, which violates {@link UnificationXref} semantics,
 * unless these objects are, in fact, equivalent 
 * (despite their URIs are different)
 * 
 * Although this rule is easy to check, auto-fixing is not that straightforward!
 * 
 * We could replace the {@link UnificationXref} xref with new {@link RelationshipXref}
 * (with the same db/id) for a pair of parent objects, such as, 
 * when the problematic unification xref is removed/replaced:
 * - have different/incompatible BioPAX type, - may fix (unsafe), but it may 
 * be ok, e.g., for CVs;
 * - are equivalent, i.e., they were also equivalent before, -  do nothing; 
 * other rules may merge them;
 * - are not equivalent but used to be equivalent, -  do fix for sure;
 * - are not equivalent, were not equivalent, but have the same type - fix (unsafe);
 * It becomes hard to tell how to fix if there are more than two parents 
 * and various types...
 * 
 * This rule won't fix, for it's unsafe; a data provider should take the warnings 
 * generated by this rule quite seriously and fix their BioPAX exporter.
 * 
 * @author rodche
 */
@Component
public class SharedUnificationXrefRule extends AbstractRule<UnificationXref> {

	public boolean canCheck(Object thing) {
		return thing instanceof UnificationXref;
	}
    
	public void check(final Validation validation, UnificationXref x) {
        if(x.getXrefOf().size()>1) {
			error(validation, x, "shared.unification.xref", false, x.getXrefOf());
        }
    }

}
