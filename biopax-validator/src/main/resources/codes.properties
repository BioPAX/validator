#=============================================================================
# ERROR CODES and MESSAGE TEMPLATES
#=============================================================================
# Errors are registered and the messages are configured using the following 
# error codes. Message templates can have extra arguments that are replaced 
# with actual values at the time the corresponding error code is resolved.
#
# some.error.code.default=a common message to show for all 'some.error.code' cases.
#
# some.error.code=the error case message template with parameters: property={0}, value={1}, etc. 
#
# some.error.code.category=one of: syntax, specification, recommendation, information
#  
# When a concrete validation rule checks a BioPAX element, E, 
# and registers the error case using its error(errors, "some.error.code", args) method, 
# args[0] replaces the parameter {0}, args[1] - {1}, etc. And, the element's URI (full RDF ID)
# will be also added in front of the resulting message; so you do not need to include
# the object E itself or its RDFId into the (optional) arguments of the template) 

illegal.property.value.default=Data property value might be wrong
illegal.property.value=property: {0}, value: {1}
illegal.property.value.category=recommendation

min.cardinality.violated.default=Minimal cardinality violation
min.cardinality.violated=property: {0} requires at least {1} value(s).
min.cardinality.violated.category=specification

max.cardinality.violated.default=Maximal cardinality violation
max.cardinality.violated=property: {0} requires {1} value(s) at most
max.cardinality.violated.category=specification

cardinality.violated.default=Cardinality violation
cardinality.violated=property: {0} requires exactly {1} value(s)
cardinality.violated.category=specification

range.violated.default=BioPAX property range violation (illegal value type)
range.violated=property: {0}, value: {1}; {2} is not {3}
range.violated.category=specification

symmetric.violated.default='Symmetric' constraint violated. The entity's property has an object value that does not refer back to this entity
symmetric.violated=this entity has {1} as its {0} but {1} does not have this entity as its {0}
symmetric.violated.category=specification

inverse.functional.violated.default=Different objects have the same value for the inverse functional property
inverse.functional.violated={1} is a value of the inverse functional property {0}, but it is also {0} of {2}
inverse.functional.violated.category=specification

syntax.error.default=Syntax error. This is usually caused by XML/RDF/OWL syntax problems found while reading the input BioPAX document
syntax.error={0}
syntax.error.category=syntax

unknown.class.default=Unknown (or prohibited) class, not defined in the BioPAX specification (or only its subclasses are allowed)
unknown.class=could not add element: {0}
unknown.class.category=specification

unknown.property.default=Unknown property (not defined in the BioPAX specification)
unknown.property=could not set property: {0}
unknown.property.category=specification

not.allowed.element.default=Direct instances of this class should not be used. A more specific class should be used instead
not.allowed.element=class: {0}
not.allowed.element.category=specification

not.specific.element.default=Use of a more specific type (sub-class) is recommended
not.specific.element=class: {0}
not.specific.element.category=recommendation

invalid.id.format.default=Xref 'id' value does not match the standard pattern for this type of db identifier. If this is due to the version of the object is embedded into the id, please use the idVersion property instead. If the database was not properly recognized (and the pattern is wrong), consider using a standard, more specific, db name (or contact the MIRIAM or identifiers.org team).
invalid.id.format=db: {0} (recognized as: {1}), id: {2}, pattern: {3}
invalid.id.format.category=recommendation

unknown.db.default=Unknown database identifier. For Xref 'db' property and Provenance standard/display name properties, please use the official database names from MIRIAM. PSI-MI "database citation" and child terms are also allowed but they are deprecated. Please use MIRIAM when possible
unknown.db=db name: {0}
unknown.db.category=recommendation

db.name.spelling.default=The 'db' property value uses a variant name of the database
db.name.spelling=db: {0}, recommended name: {1}
db.name.spelling.category=recommendation

cloned.utility.class.default=Two or more BioPAX objects are equivalent. Equivalence is based on their key BioPAX properties. Key properties for these two objects are either empty or exactly match to each other
cloned.utility.class=equivalent elements: {0} (utility class: {1})
cloned.utility.class.category=recommendation

shared.unification.xref.default=Two or more elements share the same unification xref. Please note that defining a UnificationXref to an external resource implies that this object and external resource are identical. Therefore elements that share the same unification xref must also be identical. Please consider merging these elements if they are identical, otherwise please consider converting this external reference to a RelationshipXref
shared.unification.xref=is the xref of: {0}
shared.unification.xref.category=recommendation

too.long.display.name.default='displayName' exceeds the recommended maximum. These names should be kept short so they can easily be displayed, e.g., in a pathway diagram
too.long.display.name={0}, length={1} exceeds {2}
too.long.display.name.category=recommendation

no.xrefs.default=EntityReference does not have any xrefs
no.xrefs.category=recommendation

no.unification.xref.default=EntityReference does not have a UnificationXref. Recommended best practice is to associate each entity reference with a unificiation xref to at least one of the common entity databases such as UniProt
no.unification.xref.category=recommendation

component.not.found.default=PathwayStep has a step process that is not a component of the same pathway. This means that pathway steps connect more than one different pathways, which could make pathways harder to work with
component.not.found=this pathway: {1}, step process: {0}
component.not.found.category=information

misplaced.step.conversion.default=Only one Conversion interaction can be ordered at a time (use stepConversion property to do so)
misplaced.step.conversion.category=specification

same.state.participant.default=One of the participants of a conversion did not change as a result of the conversion. If this participant is a catalyst, consider defining it as a controller using a Control class or one of its subclasses. If the actual features that has changed is not known, consider defining a tagger entityFeature such as 'active'
same.state.participant=left: {0}, right: {1}
same.state.participant.category=recommendation

same.state.entity.default=Two physical entities of this reference type have exactly the same entityFeatures and cellular location. Consider merging them as they are in the same state. If they are not equivalent but the actual features that differentiate them is not known, consider defining a tagger entityFeature such as 'active'
same.state.entity=entity: {0} is equivalent to: {1}
same.state.entity.category=recommendation

empty.participants.intersection.default=This (next) step has no participants that were used in the previous step. This could indicate an error, or simply a valid pathway 'hole'
empty.participants.intersection= previous step: {0}
empty.participants.intersection.category=information

multiple.location.default=Participants span multiple cellular locations. This may be an error e.g. if the cellular locations do not connect to each other. Check that this information makes sense
multiple.location=participants: {0}, {1}
multiple.location.category=information

participant.location.changed.default=Physical entity changes its cellular location (either it is different on the left and right sides of the reaction or not specified on one side). Consider using a TransportWithBiochemicalReaction instead
participant.location.changed=left: {0}, right: {1}
participant.location.changed.category=recommendation

transport.location.same.default=Participant cannot be in the same cellular location on the left and right sides of a Transport interaction
transport.location.same=left: {0}, right: {1}
transport.location.same.category=specification

component.different.location.default=Complex components span multiple cellular locations. This is only valid for complexes that span multiple connected compartments, e.g cytosol and cytoplasmic membrane. Please check if this is the case
component.different.location=complex location: {0}, component(s): {1}
component.different.location.category=information

component.no.location.default=A component does not have any cellular location specified, whereas the complex does.
component.no.location=complex location: {0}, component(s): {1}
component.no.location.category=information

complex.not.present.default=ComplexAssembly conversion has neither complexes nor bound together molecules (participants) on either left or right side
complex.not.present.category=specification

# see also: the 'dbAllow' set configured in the applicationContext.xml
not.allowed.xref.default=Database name in the UnificationXref (of a BioPAX element), probably, does not make sense for this type of element
not.allowed.xref=element: {1}, xref.db: {0} (unification xrefs of: {2} are limited to: {3})
not.allowed.xref.category=recommendation

# see also: the 'dbDeny' set configured in the applicationContext.xml
denied.xref.default=Database value of the UnificationXref (of a BioPAX element) does not apply (prohibited) for this type of element
denied.xref=element: {1}, xref.db: {0} (unification xrefs of: {2} cannot use: {3})
denied.xref.category=recommendation

# - CV-rules are somewhat special:
# - CV-rules may be defined for a CV class in a object property context (path)
# - a CV can be valid in one context and invalid in the other in the same model...
# - in most cases, CV's RDFId is reported, but some CV rules report to the parent element
# - parameter {1} is verbose (so prefix, like "rules:", is not required in the message)
illegal.cv.term.default=Term is not found in the recommended controlled vocabulary (- wrong name/spelling or the identifier/accession is used instead of the term)
illegal.cv.term=Illegal term(s): {0}; {1}
illegal.cv.term.category=specification

cyclic.inclusion.default=An object contains itself (either directly or indirectly). This might be biologically valid, but graph traversal algorithms must be aware of this
cyclic.inclusion=property: {0}
cyclic.inclusion.category=information

dangling.element.default=BioPAX element is not used by any other element. This is ok for root pathways or interactions; otherwise is probably a mistake
dangling.element.category=recommendation

direction.conflict.default=An illegal value or a conflict between related "direction" properties
direction.conflict={0}
direction.conflict.category=recommendation

multi.organism.pathway.default=Different organism references are found in a pathway and/or its members (excl. evidence). Is this indeed a multi-organism pathway?
multi.organism.pathway=BioSources (unification xref IDs): {0} (names: {1})
multi.organism.pathway.category=recommendation

complex.incomplete.default=Complex has no components, or the one without properly defined stoichiometry
complex.incomplete={0}
complex.incomplete.category=specification

no.display.name.default=No display name is specified. It is useful to have one for the visualization purposes
no.display.name.category=recommendation

invalid.rdf.id.default=Error in the BioPAX element ID, which must be a valid URI, i.e., only certain characters and a specific format are allowed
invalid.rdf.id=problem: {0}
invalid.rdf.id.category=syntax

duplicate.names.default=The same name is repeated multiple times. There is no need to duplicate information in the name properties
duplicate.names=name: {0}
duplicate.names.category=recommendation

illegal.conversion.default=A bio-polymer (i.e., not a complex or small molecule) is either missing or "becomes" another type on the other side of the same Conversion interaction (except for Degradation and ComplexAssembly)
illegal.conversion=conversion: {0}
illegal.conversion.category=information

diff.kind.same.name.default=Different physical entities of the same class but with different entityReference value have the same name.  This may indicate that the wrong entity reference is linked to the physical entity. (All duplicates up to a limit are listed below)
diff.kind.same.name=physical entities: {0}
diff.kind.same.name.category=information

empty.biopax.model.default=No objects were recognized in the input document. This might be due to syntax errors in the OWL/XML header, such as namespace declarations, or could represent a syntactically valid, but empty file
empty.biopax.model=level: {0}
empty.biopax.model.category=information

null.entity.reference.default=A Protein, SmallMolecule, etc. (but not a complex) has neither 'entityReference' (highly recommended) nor 'memberPhysicalEntity' values set
null.entity.reference= entityReference (range: {0}) is null, and memberPhysicalEntity is empty
null.entity.reference.category=recommendation

# This may cause trouble when persisting BioPAX elements in a DB (e.g., MySql) with RDFId used as PK.
duplicate.id.ignoringcase.default=Several BioPAX elements have "almost the same ID", i.e., when they're compared ignoring case. This may cause trouble for software systems that ignore case (e.g. primary keys in MySQL)
duplicate.id.ignoringcase=ID equals ignoring case to: {0}
duplicate.id.ignoringcase.category=recommendation

complex.stoichiometry.notcomponent.default=The value (Stoichiometry) of the componentStoichiometry property refers to a physical entity that is not among the components of the complex
complex.stoichiometry.notcomponent=stoichiometry: {0}, phys.entity: {1}, whereas component: {2}
complex.stoichiometry.notcomponent.category=specification

wrong.conversion.class.default=There is no modification to the reaction participants, and a complex seems to be formed
wrong.conversion.class=conversion class: {0}
wrong.conversion.class.category=information

ambiguous.feature.default=Since the PhysicalEntity (being a component of a complex) does not have bindingFeature defined, it is not clear how it participates in the conversion (as a component of a complex or separately?)
ambiguous.feature={0}
ambiguous.feature.category=information

improper.feature.use.default=The EntityFeature is associated with the PhysicalEntity but not with its EntityReference
improper.feature.use={0} is not a feature of Entity Reference {1}
improper.feature.use.category=specification

stoichiometry.mismatch.default=The stoichiometries of the left and the right participants do not match
stoichiometry.mismatch=Left stoichiometry: {0}, right stoichiomtry: {1}
stoichiometry.mismatch.category=information

no.xref.cv.terms.default=Controlled vocabulary(-ies) without unification xrefs for some of the (valid) terms
no.xref.cv.terms=terms: {0}; info: {1} 
no.xref.cv.terms.category=recommendation

illegal.cv.xref.default=Unification xref cannot be resolved to a recommended term for the controlled vocabulary 
illegal.cv.xref=Illegal xref(s): {0}; info: {1}
illegal.cv.xref.category=specification

too.long.id.default=Too long IDs (URIs) are allowed but not desirable, for it may cause various performance issues and errors in software that consumes BioPAX data. Also, if we look beyond a trivial data exchange use case, it is generally more difficult for a pathway data provider to support such verbose URIs, to keep it consistent from one release to another (note: ideally, a URI would be possible to resolve to a URL, with some data or summary - on that page) 
too.long.id=length={0} (exceeds {1})
too.long.id.category=information

